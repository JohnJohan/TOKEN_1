/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package token;

import java.awt.Color;
import java.io.File;
import java.util.Scanner;
import javax.swing.JFileChooser;

/**
 *
 * @author john johan
 */
public class TOKENA extends javax.swing.JFrame {

     
    String[] sourceCode;
    Boolean isPassed = true;

    /**
     * Creates new form TOKENA
     */
    public TOKENA() {
        initComponents();
         
        lexicalBtn.setEnabled(false);
        syntaxBtn.setEnabled(false);
        semanticBtn.setEnabled(false);
        clearBtn.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fileTextArea = new javax.swing.JTextArea();
        resultTextField = new javax.swing.JTextField();
        openFileBtn = new javax.swing.JButton();
        lexicalBtn = new javax.swing.JButton();
        syntaxBtn = new javax.swing.JButton();
        semanticBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileTextArea.setColumns(20);
        fileTextArea.setRows(5);
        jScrollPane1.setViewportView(fileTextArea);

        resultTextField.setText("Result: ");

        openFileBtn.setText("Open File");
        openFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileBtnActionPerformed(evt);
            }
        });

        lexicalBtn.setText("Lexical");
        lexicalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexicalBtnActionPerformed(evt);
            }
        });

        syntaxBtn.setText("Syntax");
        syntaxBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syntaxBtnActionPerformed(evt);
            }
        });

        semanticBtn.setText("Semmantic");
        semanticBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semanticBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lexicalBtn)
                    .addComponent(syntaxBtn)
                    .addComponent(semanticBtn)
                    .addComponent(clearBtn)
                    .addComponent(openFileBtn))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(openFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lexicalBtn)
                        .addGap(18, 18, 18)
                        .addComponent(syntaxBtn)
                        .addGap(18, 18, 18)
                        .addComponent(semanticBtn)
                        .addGap(18, 18, 18)
                        .addComponent(clearBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>                        
                        

    private void openFileBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
                                             
 // TODO add your handling code here:
        try{
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(this);
            
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                
                try (Scanner fileScanner = new Scanner(selectedFile)) {
                    StringBuilder str = new StringBuilder();
                    
                    while (fileScanner.hasNext()) {
                        String row = fileScanner.nextLine();
                        str.append(row).append("\n");
                    }
                    
                    sourceCode = str.toString().split("\\n");
                    
                    fileTextArea.setText(str.toString());
                    lexicalBtn.setEnabled(true);
                    syntaxBtn.setEnabled(false);
                    semanticBtn.setEnabled(false);
                    clearBtn.setEnabled(false);
                }
            }
        }
        
        catch (Exception e) {
            e.printStackTrace();
        }
                                               
    }                                           
                                           
    private void lexicalBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
                                                  

        // TODO add your handling code here:
         for (String row : sourceCode) {
            String[] lexeme = row.split("\\s+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)|(?<=;)\\s+|(?=[;])");
            int tokenCount = 0;
            StringBuilder lexStr = new StringBuilder();

            for (String token : lexeme) {
                if (token.matches("(int|double|char|String|boolean)")) {
                    tokenCount += 1;
                    lexStr.append("<data_type>");
                } else if (token.equals("=")) {
                    tokenCount += 1;
                    lexStr.append("<assignment_operator>");
                } else if (token.equals(";")) {
                    tokenCount += 1;
                    lexStr.append("<delimiter>");
                } else if (token.matches("\".*\"|\\d+|\'[a-zA-Z]\'|\\d+\\.\\d+|true|false")) {
                    tokenCount += 1;
                    lexStr.append("<value>");
                } else if (token.matches("[a-zA-Z_$][a-zA-Z\\d_$]*")) {
                    tokenCount += 1;
                    lexStr.append("<identifier>");
                }
       
            }

            if (tokenCount == 5) {
                isPassed = true;

            } else if (tokenCount == 3) {
                if (!(lexStr.toString().equals("<data_type><identifier><delimiter>") ||
                        lexStr.toString().equals("<data_type><delimiter><identifier>") ||
                        lexStr.toString().equals("<identifier><data_type><delimiter>") ||
                        lexStr.toString().equals("<identifier><delimiter><data_type>") ||
                        lexStr.toString().equals("<delimiter><data_type><identifier>") ||
                        lexStr.toString().equals("<delimiter><identifier><data_type>"))) {
                    isPassed = false;
                    break;
                }
            } else {
                isPassed = false;
                break;
            }
        }

        if (isPassed) {
            resultTextField.setText("Result: Lexical Analysis Phase Passed!");
            resultTextField.setForeground(Color.GREEN);
            lexicalBtn.setEnabled(false);
            syntaxBtn.setEnabled(true);
        } else {
            resultTextField.setText("Result: Lexical Analysis Phase Error!");
            resultTextField.setForeground(Color.RED);
            lexicalBtn.setEnabled(false);
            clearBtn.setEnabled(true);
        }   
                                              

    }                                          
                                          
    private void syntaxBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
                                                  
// TODO add your handling code here:
         for (String row : sourceCode) {
            if (row.contains("=")){
                String[] parts = row.split("=");
                String modifiedPart = parts[1].replaceAll("\\s+", "");
                String modifiedString = parts[0] + "=" + modifiedPart;
                modifiedString = modifiedString.replaceAll("([=;])", " $1 ");

                String[] lexeme = modifiedString.split("\\s+");

                if (lexeme[0].equals("String") || lexeme[0].equals("char") || lexeme[0].equals("int") || lexeme[0].equals("double") || lexeme[0].equals("boolean")) {
                    if (lexeme[1].matches("[a-zA-Z_$][a-zA-Z\\d_$]*")) {
                        if (lexeme[2].equals("=")) {
                            if (lexeme[3].matches("\".*\"") || lexeme[3].matches("[0-9]+") || lexeme[3].matches("\'([a-zA-Z])\'") || lexeme[3].matches("[0-9]+\\.[0-9]+") || lexeme[3].matches("true") || lexeme[3].matches("false")) {
                                if (lexeme[4].equals(";")) {
                                } else {
                                    isPassed = false;
                                    break;
                                }
                            } else {
                                isPassed = false;
                                break;
                            }
                        } else {
                            isPassed = false;
                            break;
                        }
                    } else {
                        isPassed = false;
                        break;
                    }
                } else {
                    isPassed = false;
                    break;
                }
            }
            else{
                String[] lexeme = row.split("\\s+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)|(?<=;)\\s+|(?=[;])");
                if (lexeme[0].equals("String") || lexeme[0].equals("char") || lexeme[0].equals("int") || lexeme[0].equals("double") || lexeme[0].equals("boolean")) {
                    if (lexeme[1].matches("[a-zA-Z_$][a-zA-Z\\d_$]*")) {
                        if (lexeme[2].equals(";")) {
                        } else {
                            isPassed = false;
                            break;
                        }
                    }
                    else{
                        isPassed = false;
                        break;
                    }
                }
                else{
                    isPassed = false;
                    break;
                }
            }
        }

        if (isPassed) {
            resultTextField.setText("Result: Syntax Analysis Phase Passed!");
            resultTextField.setForeground(Color.GREEN);
            syntaxBtn.setEnabled(false);
            semanticBtn.setEnabled(true);

        } else {
            resultTextField.setText("Result: Syntax Analysis Phase Error!");
            resultTextField.setForeground(Color.RED);
            syntaxBtn.setEnabled(false);
            semanticBtn.setEnabled(false);
            clearBtn.setEnabled(true);
        }
                                             

    }                                         
                                         

    private void semanticBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
                                                    
// TODO add your handling code here:
        for(String row : sourceCode){
             
            if (row.contains("=")){
                String[] parts = row.split("=");
                String modifiedPart = parts[1].replaceAll("\\s+", "");
                String modifiedString = parts[0] + "=" + modifiedPart;
                modifiedString = modifiedString.replaceAll("([=;])", " $1 ");

                String[] lexeme = modifiedString.split("\\s+");
                
                String data_type = lexeme[0];
                String value = lexeme[3];
                
                if(data_type.equals("String")){
                    if(value.matches("\".*\"")){
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("int")){
                    if(value.matches("[0-9]+")){
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("char")){
                    if(value.matches("\'([a-zA-Z])\'")){
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("double")){
                    if(value.matches("[0-9]+\\.[0-9]+")) {
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("boolean")){
                    if(value.matches("true") || value.matches("false")) {
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
            } else {
                String[] lexeme = row.split("\\s+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)|(?<=;)\\s+|(?=[;])");

                String data_type = lexeme[0];
                String value = "null";
                
                if(data_type.equals("String")){
                    if(value.matches("null")){
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("int")){
                    if(value.matches("null")){
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("char")){
                    if(value.matches("null")){
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("double")){
                    if(value.matches("null")) {
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
                
                if(data_type.equals("boolean")){
                    if(value.matches("null")) {
                        isPassed = true;
                    } else{
                        isPassed = false;
                        break;
                    }
                }
            }
        }
        
        if (isPassed){
            resultTextField.setText("Result: Semantic Analysis Phase Passed!");
            resultTextField.setForeground(Color.GREEN);
            semanticBtn.setEnabled(false);
            clearBtn.setEnabled(true);
        } else{
            resultTextField.setText("Result: Semantic Analysis Phase Error!");
            resultTextField.setForeground(Color.RED);
            semanticBtn.setEnabled(false);
            clearBtn.setEnabled(true);
        }
                                               
        
    }                                           
                                           
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
                                          
        // TODO add your handling code here:
        fileTextArea.setText(null);
        resultTextField.setText("Result: ");
        resultTextField.setForeground(Color.BLACK);
        clearBtn.setEnabled(false);
                                            

    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TOKENA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TOKENA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TOKENA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TOKENA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TOKENA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextArea fileTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lexicalBtn;
    private javax.swing.JButton openFileBtn;
    private javax.swing.JTextField resultTextField;
    private javax.swing.JButton semanticBtn;
    private javax.swing.JButton syntaxBtn;
    // End of variables declaration                   
}
